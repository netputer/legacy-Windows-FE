(function(e,t){define(["backbone","underscore","doT","jquery","Configuration","Internationalization","IOBackendDevice","Log","utilities/QueryString","Environment","ui/AlertWindow","ui/TemplateFactory","ui/Panel"],function(n,r,i,s,o,u,a,f,l,c,h,p,d){console.log("Device - File loaded. ");var v=e.alert,m=n.Model.extend({defaults:{isConnected:!1,isMounted:!1,hasSDCard:!1,hasEmulatedSD:!1,isUSB:!1,isWifi:!1,isInternet:!1,isFlashed:!1,isFastADB:!1,SDKVersion:0,productId:"",isRoot:!1,internalCapacity:0,externalCapacity:0,internalFreeCapacity:0,externalFreeCapacity:0,isAutoBackup:!1,deviceName:l.get("device_name")||u.misc.DEFAULT_DEVICE_NAME,udid:"",shell:{},screenshot:{}},initialize:function(){var e=!1;a.Backend.Device.onmessage({"data.channel":o.events.DEVICE_STATE_CHANGE},function(t){console.log("Device - Device state change."),e=!0,this.changeHandler(t)},this),a.requestAsync(o.actions.DEVICE_GET_DEVICE_STATE).done(function(t){t.state_code===200?(console.log("Device - Get device state success."),e||this.changeHandler(t.body)):console.error("Device - Get device state failed. Error info: "+t.state_line)}.bind(this)),a.requestAsync(o.actions.DEVICE_IS_AUTOBACKUP).done(function(e){e.state_code===200?(console.log("Device - Get device autobackup success."),this.offlineChangeHandler(e.body.value)):console.error("Device - Get device autobackup failed. Error info: "+e.state_line)}.bind(this)),this.isUserFlashedAsync().done(this.flashChangeHandler.bind(this)),a.Backend.Device.onmessage({"data.channel":o.events.DEVICE_OFFLINE_CHANGE},r.debounce(function(e){console.log("Device - Device offline change."),this.offlineChangeHandler(e)},500),this),this.on("change:deviceName",function(){this.isUserFlashedAsync().done(this.flashChangeHandler.bind(this))},this);var t=function(e,n){n&&(this.getUdidAsync().done(function(e){this.set("udid",e.body.value)}.bind(this)),this.off("change:isConnected",t))};this.on("change:isConnected",t,this);var n=function(){this.getShellInfoAsync().done(function(){c.get("deviceId")!=="Default"&&this.get("shell").path&&this.off("change:isConnected",n,this)}.bind(this))};this.on("change:isConnected",n,this)},getUdidAsync:function(){var e=s.Deferred();return a.requestAsync(o.actions.DEVICE_GET_UDID).done(function(t){t.state_code===200&&e.resolve(t)}),e},offlineChangeHandler:function(e){this.set({isAutoBackup:JSON.parse(e)})},flashChangeHandler:function(e){this.set({isFlashed:e.body.value})},changeHandler:function(e){this.set({isConnected:e.connection_state,isMounted:e.mmount_state===1?!0:!1,hasSDCard:e.mmount_state===2?!1:!0,hasEmulatedSD:!e.has_non_emulated_external_storage,isUSB:e.type===o.enums.USB_DEVICE,isWifi:e.type===o.enums.WIFI_DEVICE,isInternet:e.type===o.enums.INTERNET_DEVICE,isFastADB:e.type===o.enums.ADB_DEVICE,SDKVersion:e.sdk_version,productId:e.product_id,isRoot:e.is_root,deviceName:e.device_name})},getSDCapacityAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_GET_EXTERNAL_ROOM,success:function(t){t.state_code===200?(console.log("Device - Get external capacity success."),this.set({externalCapacity:parseInt(t.body.total_size,10),externalFreeCapacity:parseInt(t.body.available_size,10)}),e.resolve(t)):(console.error("Device - Get external capacity failed. Error info: "+t.state_line),e.reject(t))}.bind(this)}),e.promise()},getDeviceCapacityAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_GET_INTERNAL_ROOM,success:function(t){t.state_code===200?(console.log("Device - Get internal capacity success."),this.set({internalCapacity:parseInt(t.body.total_size,10),internalFreeCapacity:parseInt(t.body.available_size,10)}),e.resolve(t)):(console.error("Device - Get internal capacity failed. Error info: "+t.state_line),e.reject(t))}.bind(this)}),e.promise()},manageSDCardAsync:function(){var e=s.Deferred();if(this.get("isInternet"))v(u.welcome.MANAGE_SD_INTERNET);else{var t=function(){var t=function(e){var t=new h({draggable:!0,buttonSet:"retry_cancel",$bodyContent:e});t.on("button_retry",function(){this.manageSDCardAsync(),t.close()},this),t.show()};a.requestAsync({url:o.actions.DEVICE_OPEN_SD_CARD,success:function(n){if(n.state_code===200)console.log("Device - Open SD card success."),e.resolve(n);else{console.log("Device - Open SD card failed. Error info: "+n.state_line);switch(n.state_code){case 500:t(u.welcome.MANAGE_SD_UNCONNECT);break;case 703:t(i.template(p.get("misc","sd-mount"))({}));break;case 702:v(u.misc.ALERT_TIP_NO_SD_CARD);break;case 745:var r=s("<div>").html(u.misc.MTP_BLOCK_BY_SCREEN_LOCK),l=new h({draggable:!0,buttonSet:"retry_cancel",$bodyContent:r});l.on("button_retry",function(){this.manageSDCardAsync(),l.close()},this),r.one("click",".button-ftp",function(){a.requestAsync({url:o.actions.DEVICE_OPEN_SD_CARD,data:{use_ftp_directly:1}}),l.close()});var c=setInterval(function(){a.requestAsync(o.actions.DEVICE_OPEN_SD_CARD).done(function(e){e.state_code===200&&(l.close(),f({event:"debug.device_mtp_retry_success"}))})},5e3);l.on("remove",function(){clearInterval(c),r.remove()}),l.show(),f({event:"ui.show.device_mtp_block_show"});break;default:t(u.welcome.MANAGE_SD_ERROR)}e.reject(n)}}})}.bind(this);a.requestAsync(o.actions.DEVICE_CHECK_FTP_REG).done(function(e){if(e.body.value)t.call(this);else{var n=new d({buttons:[{$button:s("<button>").html(u.misc.FIX).addClass("primary"),eventName:"button_yes"},{$button:s("<button>").html(u.misc.OPEN_DERICTLY),eventName:"button_no"}],$bodyContent:u.misc.FTP_FIX,title:u.welcome.TOOL_SD});n.on("button_yes",function(){a.requestAsync(o.actions.DEVICE_FIX_FTP).done(function(){t.call(this)}).fail(function(){v(u.misc.FIX_FAILED)})},this),n.on("button_no",function(){t.call(this)},this),n.show()}})}return e.promise()},getBatteryInfoAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_GET_BATTERY,success:function(t){t.state_code===200?(console.log("Device - Get battery info success."),e.resolve(t)):(console.error("Device - Get battery info failed. Error info: "+t.state_line),e.reject(t))}}),e.promise()},getWallpaperAsync:function(e,t){var n=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_GET_WALLPAPER,data:{height:e,width:t},success:function(e){e.state_code===200?(console.log("Device - Get wallpaper image success."),n.resolve(e)):(console.error("Device - Get welcome wallpaper faild:"+e.state_code),n.reject(e))}}),n.promise()},getScreenshotAsync:function(e){var n=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_GET_SCREENSHOT_INFO,data:{compress:e!==t?Number(e):0},success:function(e){e.state_code===200?(console.log("Device - Get display info success.",e),this.set({screenshot:{rotation:e.body.display_info.rotation,path:e.body.screenshot.file||"",date:(new Date).getTime()}}),n.resolve(e)):(console.error("Device - Get display info failed: "+e.state_line),n.reject(e))}.bind(this)}),n.promise()},getShellInfoAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_GET_SHELL,success:function(t){t.state_code===200?(console.log("Device - Get shell info success.",t),this.set({shell:{width:t.body.shell_width,height:t.body.shell_height,path:t.body.shell_file,screenshot:t.body.screenshot}}),e.resolve(t)):(console.error("Device - Get shell info failed: "+t.state_line),e.reject(t))}.bind(this)}),e.promise()},screenShotAsync:function(e,t){var n=s.Deferred();return a.requestAsync({url:o.actions.SCREEN_SHOT,data:{save_as:e,image_type:t},success:function(e){e.state_code===200?(console.log("Device - Screen shot success.",e),n.resolve(e)):(console.error("Device - Screen shot failed: "+e.state_line),n.reject(e))}}),n.promise()},isDeviceAutoBackupAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_IS_AUTOBACKUP,success:function(t){t.state_code===200?e.resolve(t):e.reject(t)}}),e.promise()},isUserFlashedAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.IS_USER_FLASHED,success:function(t){t.state_code===200?e.resolve(t):e.reject(t)}}),e.promise()},getIsUserFlashed:function(){this.isUserFlashedAsync().done(function(e){e.state_code===200?(console.log("Device - Get device is isFlashed success."),this.flashChangeHandler(e.body.value)):console.error("Device - Get device is isFlashed failed. Error info: "+e.state_line)}.bind(this))},canScreenshotAsync:function(){var e=s.Deferred();return a.requestAsync({url:o.actions.DEVICE_CAN_SCREENSHOT_WIFI,success:function(t){t.state_code===200?e.resolve(t):e.reject(t)}}),e.promise()}}),g=new m;return g.on("change:isConnected",function(e,t){s("body").toggleClass("connected",t).toggleClass("disconnected",!t)}),e.Device=g,g})})(this);