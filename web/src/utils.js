/**
 * @fileoverview Wonder provide utility function in UT object including Date,
 * template etc.
 * @author jingfeng@wandoujia.com, wangye.zhao@wandoujia.com
 */
wonder.addModule('wonder/utils', function(W) {

    /**
     * Template utilities
     */
    var template = {};
    W.mix(template, {
        /**
         * Template module paths
         *
         * @private
         */
        _module : {
            // TODO: meta data like these should be generated by build tools, at
            // least written in config.
            ui : '../../web/build/templates/ui/UITemplate.tpl',
            application : '../../web/build/templates/module/application/application.tpl',
            contact : '../../web/build/templates/module/contact/contact.tpl',
            video : '../../web/build/templates/module/video/video.tpl'
        },
        /**
         * DOM objects pool
         *
         * @private
         */
        _dom : {},
        /**
         * Get template with given name and ID
         *
         * @param {string} name Given template name
         * @param {string} templateID Given template node ID
         * @return {string} Template string
         */
        get : function(name, templateID) {
            var self = this;
            if (!this._dom[name]) {
                $.ajax({
                    url : this._module[name],
                    success : function(resp) {
                        console.log('Util - Template loaded: ' + self._module[name]);
                        self._dom[name] = $(StringUtil.compressHTML(resp));
                    },
                    error : function() {
                        // TODO: error should not be triggered and should be
                        // removed.
                        console.error('Util - Template loaded failed: ' + self._module[name]);
                    },
                    dataType : 'text',
                    async : false
                });
            }
            if (this._dom[name]) {
                return this._dom[name].find('#' + templateID).html();
                // QUESTION: why return if it's not guaranteed?
            } else {
                console.error('Util - Can\'t find template with name "' + name + '".');
                return null;
            }
        },
        /**
         * Make template object with given jQuery object
         *
         * @param {object} obj jQuery object
         * @return {object} Template object
         */
        makeTemplate : function(sourceTemplate) {
            // QUESTION: it seems nobody calls `makeTemplate`?
            sourceTemplate = sourceTemplate.trim();
            var output = '';
            var startString = sourceTemplate.slice(0, sourceTemplate.search(/>/) + 1);
            var endString = sourceTemplate.slice(sourceTemplate.lastIndexOf('<'), sourceTemplate.length);
            output = sourceTemplate.substr(startString.length, sourceTemplate.length);
            // QUESTION: why template content is wrapped in
            // `<templates></templates>`?
            return _.template(output.substr(0, output.length - endString.length));
        },
        /**
         * Make jQuery object with given template string
         *
         * @param {string} sourceTemplate Template string
         * @return {object} jQeury object
         */
        makeEl : function(sourceTemplate) {
            // QUESTION: it seems nobody calls `makeEl`?
            return $(sourceTemplate.slice(sourceTemplate.search(/</), sourceTemplate.search(/>/) + 1));
        }
    });
    W.Template = template;

    /**
     * String Utilities
     */
    var string = {};
    W.mix(string, {
        /**
         * Test a string whether ends with given suffix
         *
         * @param {string} str Source string
         * @param {string} suffix Given suffix
         * @return {boolean} Return true if the string ends with given suffix
         */
        endsWith : function(str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        },
        /**
         * Make bytes readable
         *
         * @param {String} bytes Bytes data
         * @return {String} Readable string
         */
        readableSize : function(bytes) {
            bytes = parseInt(bytes, 10);
            var units = ['B', 'KB', 'MB', 'GB', 'TB'];
            bytes = Math.max(bytes, 0);
            var pow = Math.floor(( bytes ? Math.log(bytes) : 0) / Math.log(1024));
            pow = Math.min(pow, units.length - 1);
            bytes = bytes * 100 / Math.pow(1024, pow);
            var unit = units[pow];
            if (unit === 'KB' || unit === 'B') {
                return Math.round(Math.round(bytes) / 100) + ' ' + units[pow]
            } else {
                return Math.round(bytes) / 100 + ' ' + units[pow];
            }
        },
        /**
         * Format string with given template and attributes
         *
         * @return {string} Formated string
         */
        formatString : function() {
            var str = arguments[0];
            if ( typeof arguments[1] === "object") {
                var vars = arguments[1];
                return str.replace(/\{(\w+)\}/g, function() {
                    return vars[arguments[1]];
                });
            } else {
                var args = arguments;
                return str.replace(/\{(\d+)\}/g, function() {
                    return args[arguments[1]];
                });
                ;
            }
        },
        /**
         * Convert specified characters in source string to character entity
         *
         * @param {string} source Source string
         * @return {string} Output String
         */
        toEntity : function(source) {
            if ( typeof source === 'string') {
                // QUESTION: there are more entities than these 4, why only these
                // 4 are handled?
                // Because when these 4 character appear in HTML tags, the
                // document structure will be broken.
                // QUESTION: is there possible ways to let browser do this for
                // you because browser knows all entities and has this function
                // built-in?
                return source.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&rsquo;');
            }
        },
        /**
         * Return true if given string is an valid URL
         *
         * @param {String} url Given URL
         * @return {Boolean} True if given string is valid
         */
        validateURL : function(url) {
            var strRegex = "^(http://)";
            var re = new RegExp(strRegex);
            return re.test(url);
        }
    });
    W.String = string;

    /*
     * Date Format 1.2.3
     * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
     * MIT license
     *
     * Includes enhancements by Scott Trenda <scott.trenda.net>
     * and Kris Kowal <cixar.com/~kris.kowal/>
     *
     * Accepts a date, a mask, or a date and a mask.
     * Returns a formatted version of the given date.
     * The date defaults to the current date/time.
     * The mask defaults to dateFormat.masks.default.
     */

    var dateFormat = function() {
        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, timezoneClip = /[^-+\dA-Z]/g, pad = function(val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len)
            val = "0" + val;
            return val;
        };
        // Regexes and supporting functions are cached through closure
        return function(date, mask, utc) {
            var dF = dateFormat;

            // You can't provide utc if you skip other args (use the "UTC:" mask
            // prefix)
            if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                mask = date;
                date = undefined;
            }

            // Passing date through Date applies Date.parse, if necessary
            date = date ? new Date(date) : new Date;
            if (isNaN(date))
                throw SyntaxError("invalid date");
            mask = String(dF.masks[mask] || mask || dF.masks["default"]);

            // Allow setting the utc argument via the mask
            if (mask.slice(0, 4) == "UTC:") {
                mask = mask.slice(4);
                utc = true;
            }

            var _ = utc ? "getUTC" : "get", d = date[_ + "Date"](), D = date[_ + "Day"](), m = date[_ + "Month"](), y = date[_ + "FullYear"](), H = date[_ + "Hours"](), M = date[_ + "Minutes"](), s = date[_ + "Seconds"](), L = date[_ + "Milliseconds"](), o = utc ? 0 : date.getTimezoneOffset(), flags = {
                d : d,
                dd : pad(d),
                ddd : dF.i18n.dayNames[D],
                dddd : dF.i18n.dayNames[D + 7],
                m : m + 1,
                mm : pad(m + 1),
                mmm : dF.i18n.monthNames[m],
                mmmm : dF.i18n.monthNames[m + 12],
                yy : String(y).slice(2),
                yyyy : y,
                h : H % 12 || 12,
                hh : pad(H % 12 || 12),
                H : H,
                HH : pad(H),
                M : M,
                MM : pad(M),
                s : s,
                ss : pad(s),
                l : pad(L, 3),
                L : pad(L > 99 ? Math.round(L / 10) : L),
                t : H < 12 ? "a" : "p",
                tt : H < 12 ? "am" : "pm",
                T : H < 12 ? "A" : "P",
                TT : H < 12 ? "AM" : "PM",
                Z : utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o : (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S : ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

            return mask.replace(token, function($0) {
                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
            });
        };
    }();

    // Some common format strings
    dateFormat.masks = {
        "default" : "ddd mmm dd yyyy HH:MM:ss",
        shortDate : "m/d/yy",
        mediumDate : "mmm d, yyyy",
        longDate : "mmmm d, yyyy",
        fullDate : "dddd, mmmm d, yyyy",
        shortTime : "h:MM TT",
        mediumTime : "h:MM:ss TT",
        longTime : "h:MM:ss TT Z",
        isoDate : "yyyy-mm-dd",
        isoTime : "HH:MM:ss",
        isoDateTime : "yyyy-mm-dd'T'HH:MM:ss",
        isoUtcDateTime : "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
    };

    // Internationalization strings
    dateFormat.i18n = {
        dayNames : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        monthNames : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };

    // For convenience...
    Date.prototype.format = function(mask, utc) {
        return dateFormat(this, mask, utc);
    };

    var timer = function() {
        return {
            formatTimerFromMillisecond : function(millisecond) {
                var devide = 1000 * 60;
                var minute = parseInt(millisecond / devide, 10);
                var second = new String((millisecond % devide) / 1000).toString();
                if (second < 10) {
                    second = '0' + second;
                }
                minute = minute + ':' + second.substring(0, 2);
                return minute;
            }
        }
    }
    W.timer = timer;

    function RequestList() {
        this._list = [];
        this._sendList = [];
    }


    W.mix(RequestList.prototype, W.events);
    W.mix(RequestList.prototype, {
        push : function(request) {
            var self = this;
            if (request.item) {
                request.item.bind('remove', function(id) {
                    self.removeRequest(id);
                });
            }
            this._list.push(request);
        },
        removeRequest : function(id) {
            for (var i = 0; i < this._list.length; i++) {
                if (this._list[i].id === id) {
                    this._list.splice(i, 1);
                    return;
                }
            }
        },
        sendRequest : function(from, to) {
            to = this._list.length < to ? this._list.length : to;
            var item;
            var requestLen = to - from;
            var requestList = [];
            var request;
            this._sendList = [];

            for (var j = from, len = this._list.length; j < len; j++) {
                item = this._list[j];
                if (!item.isIgnore && requestList.length < requestLen) {
                    requestList.push(item);
                } else if (requestList.length >= requestLen) {
                    break;
                }
            }

            for (var i = 0; i < requestLen; i++) {
                request = requestList[i];
                if (request && !request.sending && !request.isSuccessed) {
                    if (request.supportSendList) {
                        this._sendList.push(request);
                    } else {
                        request.send();
                    }
                }
                if (request && request.item) {
                    request.item.setVisibility(true);
                }
            }

            var sendList = _.filter(this._sendList, function(item) {
                return !item.isSuccessed && !item.sending;
            });

            while (sendList.length) {
                this.sendListCallBack.call(null, sendList.splice(0, 5));
            }

        },
        setSendListCallback : function(callback) {
            this.sendListCallBack = callback;
        },
        reset : function() {
            this._list = [];
            this._sendList = [];
        }
    });

    W.RequestList = RequestList;

});
wonder.useModule('wonder/utils');
